// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"Food-delivery/domain"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newBasketProduct(db *gorm.DB, opts ...gen.DOOption) basketProduct {
	_basketProduct := basketProduct{}

	_basketProduct.basketProductDo.UseDB(db, opts...)
	_basketProduct.basketProductDo.UseModel(&domain.BasketProduct{})

	tableName := _basketProduct.basketProductDo.TableName()
	_basketProduct.ALL = field.NewAsterisk(tableName)
	_basketProduct.BasketID = field.NewUint(tableName, "basket_id")
	_basketProduct.ProductID = field.NewUint(tableName, "product_id")
	_basketProduct.Quantity = field.NewUint(tableName, "quantity")

	_basketProduct.fillFieldMap()

	return _basketProduct
}

type basketProduct struct {
	basketProductDo

	ALL       field.Asterisk
	BasketID  field.Uint
	ProductID field.Uint
	Quantity  field.Uint

	fieldMap map[string]field.Expr
}

func (b basketProduct) Table(newTableName string) *basketProduct {
	b.basketProductDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b basketProduct) As(alias string) *basketProduct {
	b.basketProductDo.DO = *(b.basketProductDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *basketProduct) updateTableName(table string) *basketProduct {
	b.ALL = field.NewAsterisk(table)
	b.BasketID = field.NewUint(table, "basket_id")
	b.ProductID = field.NewUint(table, "product_id")
	b.Quantity = field.NewUint(table, "quantity")

	b.fillFieldMap()

	return b
}

func (b *basketProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *basketProduct) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 3)
	b.fieldMap["basket_id"] = b.BasketID
	b.fieldMap["product_id"] = b.ProductID
	b.fieldMap["quantity"] = b.Quantity
}

func (b basketProduct) clone(db *gorm.DB) basketProduct {
	b.basketProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b basketProduct) replaceDB(db *gorm.DB) basketProduct {
	b.basketProductDo.ReplaceDB(db)
	return b
}

type basketProductDo struct{ gen.DO }

type IBasketProductDo interface {
	gen.SubQuery
	Debug() IBasketProductDo
	WithContext(ctx context.Context) IBasketProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBasketProductDo
	WriteDB() IBasketProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBasketProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBasketProductDo
	Not(conds ...gen.Condition) IBasketProductDo
	Or(conds ...gen.Condition) IBasketProductDo
	Select(conds ...field.Expr) IBasketProductDo
	Where(conds ...gen.Condition) IBasketProductDo
	Order(conds ...field.Expr) IBasketProductDo
	Distinct(cols ...field.Expr) IBasketProductDo
	Omit(cols ...field.Expr) IBasketProductDo
	Join(table schema.Tabler, on ...field.Expr) IBasketProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBasketProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBasketProductDo
	Group(cols ...field.Expr) IBasketProductDo
	Having(conds ...gen.Condition) IBasketProductDo
	Limit(limit int) IBasketProductDo
	Offset(offset int) IBasketProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBasketProductDo
	Unscoped() IBasketProductDo
	Create(values ...*domain.BasketProduct) error
	CreateInBatches(values []*domain.BasketProduct, batchSize int) error
	Save(values ...*domain.BasketProduct) error
	First() (*domain.BasketProduct, error)
	Take() (*domain.BasketProduct, error)
	Last() (*domain.BasketProduct, error)
	Find() ([]*domain.BasketProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.BasketProduct, err error)
	FindInBatches(result *[]*domain.BasketProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.BasketProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBasketProductDo
	Assign(attrs ...field.AssignExpr) IBasketProductDo
	Joins(fields ...field.RelationField) IBasketProductDo
	Preload(fields ...field.RelationField) IBasketProductDo
	FirstOrInit() (*domain.BasketProduct, error)
	FirstOrCreate() (*domain.BasketProduct, error)
	FindByPage(offset int, limit int) (result []*domain.BasketProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBasketProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b basketProductDo) Debug() IBasketProductDo {
	return b.withDO(b.DO.Debug())
}

func (b basketProductDo) WithContext(ctx context.Context) IBasketProductDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b basketProductDo) ReadDB() IBasketProductDo {
	return b.Clauses(dbresolver.Read)
}

func (b basketProductDo) WriteDB() IBasketProductDo {
	return b.Clauses(dbresolver.Write)
}

func (b basketProductDo) Session(config *gorm.Session) IBasketProductDo {
	return b.withDO(b.DO.Session(config))
}

func (b basketProductDo) Clauses(conds ...clause.Expression) IBasketProductDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b basketProductDo) Returning(value interface{}, columns ...string) IBasketProductDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b basketProductDo) Not(conds ...gen.Condition) IBasketProductDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b basketProductDo) Or(conds ...gen.Condition) IBasketProductDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b basketProductDo) Select(conds ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b basketProductDo) Where(conds ...gen.Condition) IBasketProductDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b basketProductDo) Order(conds ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b basketProductDo) Distinct(cols ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b basketProductDo) Omit(cols ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b basketProductDo) Join(table schema.Tabler, on ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b basketProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b basketProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b basketProductDo) Group(cols ...field.Expr) IBasketProductDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b basketProductDo) Having(conds ...gen.Condition) IBasketProductDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b basketProductDo) Limit(limit int) IBasketProductDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b basketProductDo) Offset(offset int) IBasketProductDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b basketProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBasketProductDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b basketProductDo) Unscoped() IBasketProductDo {
	return b.withDO(b.DO.Unscoped())
}

func (b basketProductDo) Create(values ...*domain.BasketProduct) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b basketProductDo) CreateInBatches(values []*domain.BasketProduct, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b basketProductDo) Save(values ...*domain.BasketProduct) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b basketProductDo) First() (*domain.BasketProduct, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.BasketProduct), nil
	}
}

func (b basketProductDo) Take() (*domain.BasketProduct, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.BasketProduct), nil
	}
}

func (b basketProductDo) Last() (*domain.BasketProduct, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.BasketProduct), nil
	}
}

func (b basketProductDo) Find() ([]*domain.BasketProduct, error) {
	result, err := b.DO.Find()
	return result.([]*domain.BasketProduct), err
}

func (b basketProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.BasketProduct, err error) {
	buf := make([]*domain.BasketProduct, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b basketProductDo) FindInBatches(result *[]*domain.BasketProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b basketProductDo) Attrs(attrs ...field.AssignExpr) IBasketProductDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b basketProductDo) Assign(attrs ...field.AssignExpr) IBasketProductDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b basketProductDo) Joins(fields ...field.RelationField) IBasketProductDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b basketProductDo) Preload(fields ...field.RelationField) IBasketProductDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b basketProductDo) FirstOrInit() (*domain.BasketProduct, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.BasketProduct), nil
	}
}

func (b basketProductDo) FirstOrCreate() (*domain.BasketProduct, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.BasketProduct), nil
	}
}

func (b basketProductDo) FindByPage(offset int, limit int) (result []*domain.BasketProduct, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b basketProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b basketProductDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b basketProductDo) Delete(models ...*domain.BasketProduct) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *basketProductDo) withDO(do gen.Dao) *basketProductDo {
	b.DO = *do.(*gen.DO)
	return b
}
