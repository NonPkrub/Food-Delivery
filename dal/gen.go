// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	Basket           *basket
	BasketProduct    *basketProduct
	Product          *product
	Promotion        *promotion
	PromotionProduct *promotionProduct
	User             *user
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Basket = &Q.Basket
	BasketProduct = &Q.BasketProduct
	Product = &Q.Product
	Promotion = &Q.Promotion
	PromotionProduct = &Q.PromotionProduct
	User = &Q.User
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		Basket:           newBasket(db, opts...),
		BasketProduct:    newBasketProduct(db, opts...),
		Product:          newProduct(db, opts...),
		Promotion:        newPromotion(db, opts...),
		PromotionProduct: newPromotionProduct(db, opts...),
		User:             newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Basket           basket
	BasketProduct    basketProduct
	Product          product
	Promotion        promotion
	PromotionProduct promotionProduct
	User             user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Basket:           q.Basket.clone(db),
		BasketProduct:    q.BasketProduct.clone(db),
		Product:          q.Product.clone(db),
		Promotion:        q.Promotion.clone(db),
		PromotionProduct: q.PromotionProduct.clone(db),
		User:             q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		Basket:           q.Basket.replaceDB(db),
		BasketProduct:    q.BasketProduct.replaceDB(db),
		Product:          q.Product.replaceDB(db),
		Promotion:        q.Promotion.replaceDB(db),
		PromotionProduct: q.PromotionProduct.replaceDB(db),
		User:             q.User.replaceDB(db),
	}
}

type queryCtx struct {
	Basket           IBasketDo
	BasketProduct    IBasketProductDo
	Product          IProductDo
	Promotion        IPromotionDo
	PromotionProduct IPromotionProductDo
	User             IUserDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Basket:           q.Basket.WithContext(ctx),
		BasketProduct:    q.BasketProduct.WithContext(ctx),
		Product:          q.Product.WithContext(ctx),
		Promotion:        q.Promotion.WithContext(ctx),
		PromotionProduct: q.PromotionProduct.WithContext(ctx),
		User:             q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
