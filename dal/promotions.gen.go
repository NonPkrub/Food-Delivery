// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"Food-delivery/domain"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPromotion(db *gorm.DB, opts ...gen.DOOption) promotion {
	_promotion := promotion{}

	_promotion.promotionDo.UseDB(db, opts...)
	_promotion.promotionDo.UseModel(&domain.Promotion{})

	tableName := _promotion.promotionDo.TableName()
	_promotion.ALL = field.NewAsterisk(tableName)
	_promotion.ID = field.NewUint(tableName, "id")
	_promotion.CreatedAt = field.NewTime(tableName, "created_at")
	_promotion.UpdatedAt = field.NewTime(tableName, "updated_at")
	_promotion.DeletedAt = field.NewTime(tableName, "deleted_at")
	_promotion.Code = field.NewString(tableName, "code")
	_promotion.Discount = field.NewFloat64(tableName, "discount")
	_promotion.Name = field.NewString(tableName, "name")
	_promotion.Detail = field.NewString(tableName, "detail")
	_promotion.PromotionProduct = promotionHasManyPromotionProduct{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("PromotionProduct", "domain.PromotionProduct"),
	}

	_promotion.fillFieldMap()

	return _promotion
}

type promotion struct {
	promotionDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Time
	Code             field.String
	Discount         field.Float64
	Name             field.String
	Detail           field.String
	PromotionProduct promotionHasManyPromotionProduct

	fieldMap map[string]field.Expr
}

func (p promotion) Table(newTableName string) *promotion {
	p.promotionDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotion) As(alias string) *promotion {
	p.promotionDo.DO = *(p.promotionDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotion) updateTableName(table string) *promotion {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewTime(table, "deleted_at")
	p.Code = field.NewString(table, "code")
	p.Discount = field.NewFloat64(table, "discount")
	p.Name = field.NewString(table, "name")
	p.Detail = field.NewString(table, "detail")

	p.fillFieldMap()

	return p
}

func (p *promotion) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotion) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["code"] = p.Code
	p.fieldMap["discount"] = p.Discount
	p.fieldMap["name"] = p.Name
	p.fieldMap["detail"] = p.Detail

}

func (p promotion) clone(db *gorm.DB) promotion {
	p.promotionDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotion) replaceDB(db *gorm.DB) promotion {
	p.promotionDo.ReplaceDB(db)
	return p
}

type promotionHasManyPromotionProduct struct {
	db *gorm.DB

	field.RelationField
}

func (a promotionHasManyPromotionProduct) Where(conds ...field.Expr) *promotionHasManyPromotionProduct {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a promotionHasManyPromotionProduct) WithContext(ctx context.Context) *promotionHasManyPromotionProduct {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a promotionHasManyPromotionProduct) Session(session *gorm.Session) *promotionHasManyPromotionProduct {
	a.db = a.db.Session(session)
	return &a
}

func (a promotionHasManyPromotionProduct) Model(m *domain.Promotion) *promotionHasManyPromotionProductTx {
	return &promotionHasManyPromotionProductTx{a.db.Model(m).Association(a.Name())}
}

type promotionHasManyPromotionProductTx struct{ tx *gorm.Association }

func (a promotionHasManyPromotionProductTx) Find() (result []*domain.PromotionProduct, err error) {
	return result, a.tx.Find(&result)
}

func (a promotionHasManyPromotionProductTx) Append(values ...*domain.PromotionProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a promotionHasManyPromotionProductTx) Replace(values ...*domain.PromotionProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a promotionHasManyPromotionProductTx) Delete(values ...*domain.PromotionProduct) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a promotionHasManyPromotionProductTx) Clear() error {
	return a.tx.Clear()
}

func (a promotionHasManyPromotionProductTx) Count() int64 {
	return a.tx.Count()
}

type promotionDo struct{ gen.DO }

type IPromotionDo interface {
	gen.SubQuery
	Debug() IPromotionDo
	WithContext(ctx context.Context) IPromotionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionDo
	WriteDB() IPromotionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionDo
	Not(conds ...gen.Condition) IPromotionDo
	Or(conds ...gen.Condition) IPromotionDo
	Select(conds ...field.Expr) IPromotionDo
	Where(conds ...gen.Condition) IPromotionDo
	Order(conds ...field.Expr) IPromotionDo
	Distinct(cols ...field.Expr) IPromotionDo
	Omit(cols ...field.Expr) IPromotionDo
	Join(table schema.Tabler, on ...field.Expr) IPromotionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo
	Group(cols ...field.Expr) IPromotionDo
	Having(conds ...gen.Condition) IPromotionDo
	Limit(limit int) IPromotionDo
	Offset(offset int) IPromotionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo
	Unscoped() IPromotionDo
	Create(values ...*domain.Promotion) error
	CreateInBatches(values []*domain.Promotion, batchSize int) error
	Save(values ...*domain.Promotion) error
	First() (*domain.Promotion, error)
	Take() (*domain.Promotion, error)
	Last() (*domain.Promotion, error)
	Find() ([]*domain.Promotion, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Promotion, err error)
	FindInBatches(result *[]*domain.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.Promotion) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionDo
	Assign(attrs ...field.AssignExpr) IPromotionDo
	Joins(fields ...field.RelationField) IPromotionDo
	Preload(fields ...field.RelationField) IPromotionDo
	FirstOrInit() (*domain.Promotion, error)
	FirstOrCreate() (*domain.Promotion, error)
	FindByPage(offset int, limit int) (result []*domain.Promotion, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionDo) Debug() IPromotionDo {
	return p.withDO(p.DO.Debug())
}

func (p promotionDo) WithContext(ctx context.Context) IPromotionDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionDo) ReadDB() IPromotionDo {
	return p.Clauses(dbresolver.Read)
}

func (p promotionDo) WriteDB() IPromotionDo {
	return p.Clauses(dbresolver.Write)
}

func (p promotionDo) Session(config *gorm.Session) IPromotionDo {
	return p.withDO(p.DO.Session(config))
}

func (p promotionDo) Clauses(conds ...clause.Expression) IPromotionDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionDo) Returning(value interface{}, columns ...string) IPromotionDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionDo) Not(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionDo) Or(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionDo) Select(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionDo) Where(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionDo) Order(conds ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionDo) Distinct(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionDo) Omit(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionDo) Join(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionDo) Group(cols ...field.Expr) IPromotionDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionDo) Having(conds ...gen.Condition) IPromotionDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionDo) Limit(limit int) IPromotionDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionDo) Offset(offset int) IPromotionDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionDo) Unscoped() IPromotionDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionDo) Create(values ...*domain.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionDo) CreateInBatches(values []*domain.Promotion, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionDo) Save(values ...*domain.Promotion) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionDo) First() (*domain.Promotion, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Promotion), nil
	}
}

func (p promotionDo) Take() (*domain.Promotion, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Promotion), nil
	}
}

func (p promotionDo) Last() (*domain.Promotion, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Promotion), nil
	}
}

func (p promotionDo) Find() ([]*domain.Promotion, error) {
	result, err := p.DO.Find()
	return result.([]*domain.Promotion), err
}

func (p promotionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.Promotion, err error) {
	buf := make([]*domain.Promotion, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionDo) FindInBatches(result *[]*domain.Promotion, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionDo) Attrs(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionDo) Assign(attrs ...field.AssignExpr) IPromotionDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionDo) Joins(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionDo) Preload(fields ...field.RelationField) IPromotionDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionDo) FirstOrInit() (*domain.Promotion, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Promotion), nil
	}
}

func (p promotionDo) FirstOrCreate() (*domain.Promotion, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.Promotion), nil
	}
}

func (p promotionDo) FindByPage(offset int, limit int) (result []*domain.Promotion, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionDo) Delete(models ...*domain.Promotion) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionDo) withDO(do gen.Dao) *promotionDo {
	p.DO = *do.(*gen.DO)
	return p
}
