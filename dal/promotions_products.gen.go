// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"Food-delivery/domain"
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newPromotionProduct(db *gorm.DB, opts ...gen.DOOption) promotionProduct {
	_promotionProduct := promotionProduct{}

	_promotionProduct.promotionProductDo.UseDB(db, opts...)
	_promotionProduct.promotionProductDo.UseModel(&domain.PromotionProduct{})

	tableName := _promotionProduct.promotionProductDo.TableName()
	_promotionProduct.ALL = field.NewAsterisk(tableName)
	_promotionProduct.PromotionID = field.NewUint(tableName, "promotion_id")
	_promotionProduct.ProductID = field.NewUint(tableName, "product_id")

	_promotionProduct.fillFieldMap()

	return _promotionProduct
}

type promotionProduct struct {
	promotionProductDo

	ALL         field.Asterisk
	PromotionID field.Uint
	ProductID   field.Uint

	fieldMap map[string]field.Expr
}

func (p promotionProduct) Table(newTableName string) *promotionProduct {
	p.promotionProductDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p promotionProduct) As(alias string) *promotionProduct {
	p.promotionProductDo.DO = *(p.promotionProductDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *promotionProduct) updateTableName(table string) *promotionProduct {
	p.ALL = field.NewAsterisk(table)
	p.PromotionID = field.NewUint(table, "promotion_id")
	p.ProductID = field.NewUint(table, "product_id")

	p.fillFieldMap()

	return p
}

func (p *promotionProduct) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *promotionProduct) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["promotion_id"] = p.PromotionID
	p.fieldMap["product_id"] = p.ProductID
}

func (p promotionProduct) clone(db *gorm.DB) promotionProduct {
	p.promotionProductDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p promotionProduct) replaceDB(db *gorm.DB) promotionProduct {
	p.promotionProductDo.ReplaceDB(db)
	return p
}

type promotionProductDo struct{ gen.DO }

type IPromotionProductDo interface {
	gen.SubQuery
	Debug() IPromotionProductDo
	WithContext(ctx context.Context) IPromotionProductDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPromotionProductDo
	WriteDB() IPromotionProductDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPromotionProductDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPromotionProductDo
	Not(conds ...gen.Condition) IPromotionProductDo
	Or(conds ...gen.Condition) IPromotionProductDo
	Select(conds ...field.Expr) IPromotionProductDo
	Where(conds ...gen.Condition) IPromotionProductDo
	Order(conds ...field.Expr) IPromotionProductDo
	Distinct(cols ...field.Expr) IPromotionProductDo
	Omit(cols ...field.Expr) IPromotionProductDo
	Join(table schema.Tabler, on ...field.Expr) IPromotionProductDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionProductDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPromotionProductDo
	Group(cols ...field.Expr) IPromotionProductDo
	Having(conds ...gen.Condition) IPromotionProductDo
	Limit(limit int) IPromotionProductDo
	Offset(offset int) IPromotionProductDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionProductDo
	Unscoped() IPromotionProductDo
	Create(values ...*domain.PromotionProduct) error
	CreateInBatches(values []*domain.PromotionProduct, batchSize int) error
	Save(values ...*domain.PromotionProduct) error
	First() (*domain.PromotionProduct, error)
	Take() (*domain.PromotionProduct, error)
	Last() (*domain.PromotionProduct, error)
	Find() ([]*domain.PromotionProduct, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.PromotionProduct, err error)
	FindInBatches(result *[]*domain.PromotionProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*domain.PromotionProduct) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPromotionProductDo
	Assign(attrs ...field.AssignExpr) IPromotionProductDo
	Joins(fields ...field.RelationField) IPromotionProductDo
	Preload(fields ...field.RelationField) IPromotionProductDo
	FirstOrInit() (*domain.PromotionProduct, error)
	FirstOrCreate() (*domain.PromotionProduct, error)
	FindByPage(offset int, limit int) (result []*domain.PromotionProduct, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPromotionProductDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p promotionProductDo) Debug() IPromotionProductDo {
	return p.withDO(p.DO.Debug())
}

func (p promotionProductDo) WithContext(ctx context.Context) IPromotionProductDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p promotionProductDo) ReadDB() IPromotionProductDo {
	return p.Clauses(dbresolver.Read)
}

func (p promotionProductDo) WriteDB() IPromotionProductDo {
	return p.Clauses(dbresolver.Write)
}

func (p promotionProductDo) Session(config *gorm.Session) IPromotionProductDo {
	return p.withDO(p.DO.Session(config))
}

func (p promotionProductDo) Clauses(conds ...clause.Expression) IPromotionProductDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p promotionProductDo) Returning(value interface{}, columns ...string) IPromotionProductDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p promotionProductDo) Not(conds ...gen.Condition) IPromotionProductDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p promotionProductDo) Or(conds ...gen.Condition) IPromotionProductDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p promotionProductDo) Select(conds ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p promotionProductDo) Where(conds ...gen.Condition) IPromotionProductDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p promotionProductDo) Order(conds ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p promotionProductDo) Distinct(cols ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p promotionProductDo) Omit(cols ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p promotionProductDo) Join(table schema.Tabler, on ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p promotionProductDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p promotionProductDo) RightJoin(table schema.Tabler, on ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p promotionProductDo) Group(cols ...field.Expr) IPromotionProductDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p promotionProductDo) Having(conds ...gen.Condition) IPromotionProductDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p promotionProductDo) Limit(limit int) IPromotionProductDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p promotionProductDo) Offset(offset int) IPromotionProductDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p promotionProductDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPromotionProductDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p promotionProductDo) Unscoped() IPromotionProductDo {
	return p.withDO(p.DO.Unscoped())
}

func (p promotionProductDo) Create(values ...*domain.PromotionProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p promotionProductDo) CreateInBatches(values []*domain.PromotionProduct, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p promotionProductDo) Save(values ...*domain.PromotionProduct) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p promotionProductDo) First() (*domain.PromotionProduct, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*domain.PromotionProduct), nil
	}
}

func (p promotionProductDo) Take() (*domain.PromotionProduct, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*domain.PromotionProduct), nil
	}
}

func (p promotionProductDo) Last() (*domain.PromotionProduct, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*domain.PromotionProduct), nil
	}
}

func (p promotionProductDo) Find() ([]*domain.PromotionProduct, error) {
	result, err := p.DO.Find()
	return result.([]*domain.PromotionProduct), err
}

func (p promotionProductDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*domain.PromotionProduct, err error) {
	buf := make([]*domain.PromotionProduct, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p promotionProductDo) FindInBatches(result *[]*domain.PromotionProduct, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p promotionProductDo) Attrs(attrs ...field.AssignExpr) IPromotionProductDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p promotionProductDo) Assign(attrs ...field.AssignExpr) IPromotionProductDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p promotionProductDo) Joins(fields ...field.RelationField) IPromotionProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p promotionProductDo) Preload(fields ...field.RelationField) IPromotionProductDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p promotionProductDo) FirstOrInit() (*domain.PromotionProduct, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*domain.PromotionProduct), nil
	}
}

func (p promotionProductDo) FirstOrCreate() (*domain.PromotionProduct, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*domain.PromotionProduct), nil
	}
}

func (p promotionProductDo) FindByPage(offset int, limit int) (result []*domain.PromotionProduct, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p promotionProductDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p promotionProductDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p promotionProductDo) Delete(models ...*domain.PromotionProduct) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *promotionProductDo) withDO(do gen.Dao) *promotionProductDo {
	p.DO = *do.(*gen.DO)
	return p
}
